image:
  repository: "ghcr.io/immich-app/immich-server"
  tag: "v1.132.0@sha256:b69f91e91ce92e9ed210acfd43e94dd12754c7601e84460394dcc5a322ce10be"
  pullPolicy: "IfNotPresent"

mlImage:
  repository: ghcr.io/immich-app/immich-machine-learning
  pullPolicy: IfNotPresent
  tag: v1.132.0@sha256:0755de3bc43d4cec265c5df1ac783199f997dbe13b94c84ce98aeb2553f6d070

mlCudaImage:
  repository: ghcr.io/immich-app/immich-machine-learning
  pullPolicy: IfNotPresent
  tag: v1.132.0-cuda@sha256:817fcd0c08f13675d4e5d0655f97be80238c303514515ef310820ce50604b698

mlOpenvinoImage:
  repository: ghcr.io/immich-app/immich-machine-learning
  pullPolicy: IfNotPresent
  tag: v1.132.0-openvino@sha256:4571d407f800ff683559ce3cdf9cf586be0071cf35f9d2f33fedc28c6d0f3ff4

securityContext:
  container:
    readOnlyRootFilesystem: false
    runAsNonRoot: false
    runAsUser: 0
    runAsGroup: 0

immich:
  enable_ml: true
  mlImageType: mlImage
  log_level: log

service:
  main:
    # Main service targets the server
    targetSelector: main
    ports:
      main:
        port: 10323
        protocol: http
        targetSelector: main
  microservices:
    enabled: true
    type: ClusterIP
    targetSelector: microservices
    ports:
      microservices:
        enabled: true
        primary: true
        port: 10004
        protocol: http
        targetSelector: microservices
  machinelearning:
    enabled: true
    type: ClusterIP
    targetSelector: machinelearning
    ports:
      machinelearning:
        enabled: true
        primary: true
        port: 10003
        protocol: http
        targetSelector: machinelearning

persistence:
  mlcache:
    enabled: true
    type: emptyDir
    targetSelector:
      machinelearning:
        machinelearning:
          mountPath: /mlcache
  microcache:
    enabled: true
    type: emptyDir
    targetSelector:
      microservices:
        microservices:
          mountPath: /microcache
  library:
    enabled: true
    mountPath: /usr/src/app/upload/library
    targetSelector:
      # Main pod/container is server
      main:
        main: {}
      microservices:
        microservices: {}
  uploads:
    enabled: true
    mountPath: /usr/src/app/upload/upload
    targetSelector:
      # Main pod/container is server
      main:
        main: {}
      microservices:
        microservices: {}
  backups:
    enabled: true
    mountPath: /usr/src/app/upload/backups
    targetSelector:
      # Main pod/container is server
      main:
        main: {}
      microservices:
        microservices: {}
  thumbs:
    enabled: true
    mountPath: /usr/src/app/upload/thumbs
    targetSelector:
      # Main pod/container is server
      main:
        main: {}
      microservices:
        microservices: {}
  profile:
    enabled: true
    mountPath: /usr/src/app/upload/profile
    targetSelector:
      # Main pod/container is server
      main:
        main: {}
      microservices:
        microservices: {}
  video:
    enabled: true
    mountPath: /usr/src/app/upload/encoded-video
    targetSelector:
      # Main pod/container is server
      main:
        main: {}
      microservices:
        microservices: {}

cnpg:
  main:
    enabled: true
    user: immich
    database: immich
    type: vectors
    cluster:
      initdb:
        postInitApplicationSQL:
        - CREATE EXTENSION IF NOT EXISTS cube;
        - CREATE EXTENSION IF NOT EXISTS earthdistance;
        - CREATE SCHEMA IF NOT EXISTS vectors;
        - ALTER DATABASE immich SET search_path TO "immich", public, vectors;
        - SET search_path TO "immich", public, vectors;
        - GRANT SELECT ON TABLE pg_vector_index_stat TO PUBLIC;
        - ALTER SCHEMA vectors OWNER TO immich;

redis:
  enabled: true
  includeCommon: true
  redisUsername: default

portal:
  open:
    enabled: true

ingress:
  main:
    integrations:
      homepage:
        widget:
          version: 2
